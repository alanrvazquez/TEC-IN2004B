{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Clustering Methods\"\n",
        "subtitle: \"IN2004B: Generation of Value with Data Analytics\"\n",
        "author: \n",
        "  - name: Alan R. Vazquez\n",
        "    affiliations:\n",
        "      - name: Department of Industrial Engineering\n",
        "format: \n",
        "  revealjs:\n",
        "    chalkboard: false\n",
        "    multiplex: false\n",
        "    footer: \"Tecnologico de Monterrey\"\n",
        "    logo: IN2004B_logo.png\n",
        "    css: style.css\n",
        "    slide-number: True\n",
        "    html-math-method: mathjax\n",
        "editor: visual\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Agenda\n",
        "\n",
        "</br>\n",
        "\n",
        "1.  Unsupervised Learning\n",
        "\n",
        "2.  Clustering Methods\n",
        "\n",
        "3.  K-Means Method\n",
        "\n",
        "4.  Hierarchical Clustering\n",
        "\n",
        "# Unsupervised Learning\n",
        "\n",
        "## Load the libraries\n",
        "\n",
        "Before we start, let's import the data science libraries into Python.\n"
      ],
      "id": "db708146"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.cluster import KMeans, AgglomerativeClustering\n",
        "from scipy.cluster.hierarchy import dendrogram, linkage"
      ],
      "id": "0c155af7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here, we use specific functions from the **pandas**, **matplotlib**, **seaborn**, **sklearn**, and **scipy** libraries in Python.\n",
        "\n",
        "## Types of learning\n",
        "\n",
        "</br></br>\n",
        "\n",
        "In data science, there are two main types of learning:\n",
        "\n",
        "-   [Supervised learning]{style=\"color:blue;\"}. In which we have multiple predictors and one response. The goal is to predict the response using the predictor values.\n",
        "\n",
        "-   [Unsupervised learning]{style=\"color:green;\"}. In which we have only multiple predictors. The goal is to discover patterns in your data.\n",
        "\n",
        "## Types of learning\n",
        "\n",
        "</br></br>\n",
        "\n",
        "In data science, there are two main types of learning:\n",
        "\n",
        "-   [Supervised learning. In which we have multiple predictors and one response. The goal is to predict the response using the predictor values.]{style=\"color:gray;\"}\n",
        "\n",
        "-   [Unsupervised learning]{style=\"color:green;\"}. In which we have only multiple predictors. The goal is to discover patterns in your data.\n",
        "\n",
        "## Unsupervised learning\n",
        "\n",
        "**Goal**: organize or *group* data to gain insights. It answers questions like these\n",
        "\n",
        "-   Is there an informative way to visualize the data?\n",
        "-   Can we discover subgroups among variables or observations?\n",
        "\n",
        ". . .\n",
        "\n",
        "Unsupervised learning is more challenging than supervised learning because it is [**subjective**]{style=\"color:darkgreen;\"} and there is no simple objective for the analysis, such as predicting a response.\n",
        "\n",
        ". . .\n",
        "\n",
        "It is also known as *exploratory data analysis*.\n",
        "\n",
        "## Examples of Unsupervised Learning\n",
        "\n",
        "</br>\n",
        "\n",
        "-   *Marketing.* Identify a segment of customers with a high tendency to purchase a specific product.\n",
        "\n",
        "-   *Retail.* Group customers based on their preferences, style, clothing choices, and store preferences.\n",
        "\n",
        "-   *Medical Science.* Facilitate the efficient diagnosis and treatment of patients, as well as the discovery of new drugs.\n",
        "\n",
        "-   *Sociology.* Classify people based on their demographics, lifestyle, socioeconomic status, etc.\n",
        "\n",
        "## Unsupervised learning methods\n",
        "\n",
        "</br></br>\n",
        "\n",
        "-   [**Clustering Methods**]{style=\"color:#8B004F;\"} aim to find subgroups with similar data in the database.\n",
        "\n",
        "-   [**Principal Component Analysis**]{style=\"color:#017373;\"} seeks an alternative representation of the data to make it easier to understand when there are many predictors in the database.\n",
        "\n",
        "Here we will use these methods on predictors $X_1, X_2, \\ldots, X_p,$ which are *numerical*.\n",
        "\n",
        "## Unsupervised learning methods\n",
        "\n",
        "</br></br>\n",
        "\n",
        "-   [**Clustering Methods**]{style=\"color:#8B004F;\"} aim to find subgroups with similar data in the database.\n",
        "\n",
        "-   [**Principal Component Analysis** seeks an alternative representation of the data to make it easier to understand when there are many predictors in the database.]{style=\"color:gray;\"}\n",
        "\n",
        "Here we will use these methods on predictors $X_1, X_2, \\ldots, X_p,$ which are *numerical*.\n",
        "\n",
        "# Clustering Methods\n",
        "\n",
        "## Clustering methods\n",
        "\n",
        "They group data in different ways to discover groups with common traits.\n",
        "\n",
        "![](images/clipboard-4025099075.png){fig-align=\"center\"}\n",
        "\n",
        "## Clustering methods\n",
        "\n",
        "</br></br>\n",
        "\n",
        "Two classic clustering methods are:\n",
        "\n",
        "-   [**K-Means Method**]{style=\"color:pink;\"}. We seek to divide the observations into *K* groups.\n",
        "\n",
        "-   [**Hierarchical Clustering**]{style=\"color:darkpink;\"}. We divide the *n* observations into 1 group, 2 groups, 3 groups, ..., up to *n* groups. We visualize the divisions using a graph called a **dendrogram**.\n",
        "\n",
        "## Example 1\n",
        "\n",
        "The “penguins.xlsx” database contains data on 342 penguins in Antarctica. The data includes:\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "-   Bill length in millimeters.\n",
        "-   Bill depth in millimeters.\n",
        "-   Flipper length in millimeters.\n",
        "-   Body mass in grams.\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/clipboard-2240851715.png){fig-align=\"center\" width=\"163\" height=\"372\"}\n",
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## Data\n"
      ],
      "id": "f6a91692"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "penguins_data = pd.read_excel(\"penguins.xlsx\")\n",
        "penguins_data.head()"
      ],
      "id": "32f9effb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Data visualization\n",
        "\n",
        "Can we group penguins based on their characteristics?\n"
      ],
      "id": "69a4eed6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true \n",
        "\n",
        "plt.figure(figsize=(8, 5)) # Set figure size.\n",
        "sns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\") # Define type of plot.\n",
        "plt.show() # Display the plot."
      ],
      "id": "24686b79",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# K-Means Method\n",
        "\n",
        "## The K-Means method\n",
        "\n",
        "</br>\n",
        "\n",
        "**Goal**: Find *K* groups of observations such that each observation is in a different group.\n",
        "\n",
        "![](images/clipboard-3145794211.png)\n",
        "\n",
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        "For this, the method requires two elements:\n",
        "\n",
        "::: incremental\n",
        "1.  A measure of \"closeness\" between observations.\n",
        "\n",
        "2.  An algorithm that groups observations that are close to each other.\n",
        ":::\n",
        "\n",
        ". . .\n",
        "\n",
        "Good clustering is one in which observations within a group are close together and observations in different groups are far apart.\n",
        "\n",
        "## How do we measure the distance between observations?\n",
        "\n",
        "For quantitative predictors, we use the **Euclidean distance**.\n",
        "\n",
        "For example, if we have two predictors $X_1$ and $X_2$ with observations given in the table:\n",
        "\n",
        "| Observation | $X_1$     | $X_2$     |\n",
        "|-------------|-----------|-----------|\n",
        "| 1           | $X_{1,1}$ | $X_{1,2}$ |\n",
        "| 2           | $X_{2,1}$ | $X_{2,2}$ |\n",
        "\n",
        "## Euclidean distance\n",
        "\n",
        "</br>\n",
        "\n",
        "![](images/distancia_euclideana.png){fig-align=\"center\"}\n",
        "\n",
        "::: center\n",
        "$$d = \\sqrt{(X_{1,1} - X_{2,1})^2 + (X_{1,2} - X_{2,2})^2 }$$\n",
        ":::\n",
        "\n",
        "## \n",
        "\n",
        "We can extend the Euclidean distance to measure the distance between observations when we have more predictors. For example, with 3 predictors we have\n",
        "\n",
        "| Observation | $X_1$     | $X_2$     | $X_3$     |\n",
        "|-------------|-----------|-----------|-----------|\n",
        "| 1           | $X_{1,1}$ | $X_{1,2}$ | $X_{1,3}$ |\n",
        "| 2           | $X_{2,1}$ | $X_{2,2}$ | $X_{2,3}$ |\n",
        "\n",
        "</br>\n",
        "\n",
        "Where the Euclidean distance is\n",
        "\n",
        "$$d = \\sqrt{(X_{1,1} - X_{2,1})^2 + (X_{1,2} - X_{2,2})^2 + (X_{1,3} - X_{2,3})^2 }$$\n",
        "\n",
        "## Problem with Euclidean distance\n",
        "\n",
        "</br>\n",
        "\n",
        "-   The Euclidean distance depends on the units of measurement of the predictors!\n",
        "\n",
        "-   Predictors with certain units have greater importance in calculating the distance.\n",
        "\n",
        "-   This is not good since we want all predictors to have equal importance when calculating the Euclidean distance between two observations.\n",
        "\n",
        "-   The solution is to **standardize** the units of the predictors.\n",
        "\n",
        "## K-Means Algorithm\n",
        "\n",
        "::::::: center\n",
        ":::::: columns\n",
        ":::: {.column width=\"50%\"}\n",
        "::: {style=\"font-size: 90%;\"}\n",
        "Choose a value for *K*, the number of groups.\n",
        "\n",
        "1.  Randomly assign observations to one of the *K* groups.\n",
        "2.  Find the *centroids* (average points) of each group.\n",
        "3.  Reassign observations to the group with the closest centroid.\n",
        "4.  Repeat steps 3 and 4 until there are no more changes.\n",
        ":::\n",
        "::::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/clipboard-1847659123.png){fig-align=\"center\"}\n",
        ":::\n",
        "::::::\n",
        ":::::::\n",
        "\n",
        "## Example 1 (cont.)\n",
        "\n",
        "Let's apply the algorithm to the predictors `bill_depth_mm` and `bill_length_mm` of the penguins dataset.\n"
      ],
      "id": "4f5bf1de"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true \n",
        "\n",
        "X_penguins = penguins_data.filter(['bill_depth_mm', 'bill_length_mm'])\n",
        "X_penguins.head()"
      ],
      "id": "464f018e",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Standarization\n",
        "\n",
        "Since the K-means algorithm works with Euclidean distance, we must standardize the predictors before we start. In this way, all of them will be equally informative in the process.\n"
      ],
      "id": "4565871a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true \n",
        "\n",
        "## Standardize\n",
        "scaler = StandardScaler()\n",
        "Xs_penguins = scaler.fit_transform(X_penguins)"
      ],
      "id": "e4a5851a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        "In Python, we use the `KMeans()` function of **sklearn** to apply K-means clustering. `KMeans()` tells Python we want to train a K-means clustering algorithm and `.fit_predict()` actually trains it using the data.\n"
      ],
      "id": "d0d45684"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "# Fit KMeans with 3 clusters\n",
        "kmeans = KMeans(n_clusters = 3, random_state = 301655)\n",
        "clusters = kmeans.fit_predict(Xs_penguins)"
      ],
      "id": "4d800b52",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The argument `n_clusters` sets the desired number of clusters and `random_state` allows us to reproduce the analysis.\n",
        "\n",
        "## \n",
        "\n",
        "The clusters created are contained in the `clusters` object.\n"
      ],
      "id": "2bc93f55"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true \n",
        "\n",
        "clusters"
      ],
      "id": "a96ecdf5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "To visualize the clusters, we augment the original dataset `X_penguins` (without standarization) with the `clusters` object. usign the code below.\n"
      ],
      "id": "d16294ae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "clustered_penguins = (X_penguins\n",
        "              .assign(Cluster = clusters)\n",
        "              )\n",
        "\n",
        "clustered_penguins.head()"
      ],
      "id": "0976c438",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n"
      ],
      "id": "0a2a083a"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true \n",
        "\n",
        "plt.figure(figsize=(9, 6))\n",
        "sns.scatterplot(data = clustered_penguins, x = 'bill_length_mm', y = 'bill_depth_mm', \n",
        "                hue = 'Cluster', palette = 'Set1')\n",
        "plt.title('K-means Clustering of Penguins')\n",
        "plt.xlabel('Bill Length (mm)')\n",
        "plt.ylabel('Bill Depth (mm)')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "2252de26",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## The truth: 3 groups of penguins\n"
      ],
      "id": "cb5ff0ff"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true \n",
        "\n",
        "plt.figure(figsize=(9, 6))\n",
        "sns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\",\n",
        "                hue=\"species\", palette = 'Set1') # Define type of plot.\n",
        "plt.show() # Display the plot."
      ],
      "id": "6518093a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "fd1cd76e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: false\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "plt.figure(figsize=(5, 5))\n",
        "sns.scatterplot(data = clustered_penguins, x = 'bill_length_mm', y = 'bill_depth_mm', \n",
        "                hue = 'Cluster', palette = 'Set1')\n",
        "plt.title('K-means Clustering of Penguins')\n",
        "plt.xlabel('Bill Length (mm)')\n",
        "plt.ylabel('Bill Depth (mm)')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "ccfbc632",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "4194bca6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: false\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "sns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\",\n",
        "                hue=\"species\", palette = 'Set1') # Define type of plot.\n",
        "plt.show() # Display the plot."
      ],
      "id": "28d6a746",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## Let's try using more predictors\n",
        "\n",
        "</br>\n"
      ],
      "id": "bbadd29c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "X_penguins = penguins_data.filter(['bill_depth_mm', 'bill_length_mm', \n",
        "                          'flipper_length_mm', 'body_mass_g'])\n",
        "\n",
        "## Standardize\n",
        "scaler = StandardScaler()\n",
        "Xs_penguins = scaler.fit_transform(X_penguins)\n",
        "\n",
        "# Fit KMeans with 3 clusters\n",
        "kmeans = KMeans(n_clusters = 3, random_state = 301655)\n",
        "clusters = kmeans.fit_predict(Xs_penguins)\n",
        "\n",
        "# Save new clusters into the original data\n",
        "clustered_X = (X_penguins\n",
        "              .assign(Cluster = clusters)\n",
        "              )"
      ],
      "id": "2860e494",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "a965a475"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: false\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "plt.figure(figsize=(5, 5))\n",
        "sns.scatterplot(data = clustered_X, x = 'bill_length_mm', y = 'bill_depth_mm', hue = 'Cluster', palette = 'Set1')\n",
        "plt.title('K-means Clustering of Penguins')\n",
        "plt.xlabel('Bill Length (mm)')\n",
        "plt.ylabel('Bill Depth (mm)')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "46f8f7ec",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "877e82b1"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: false\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "sns.scatterplot(data=penguins_data, x=\"bill_depth_mm\", y=\"bill_length_mm\",\n",
        "                hue=\"species\", palette = 'Set1') # Define type of plot.\n",
        "plt.show() # Display the plot."
      ],
      "id": "c71f55cb",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## These are the three species\n",
        "\n",
        "::::::: center\n",
        ":::::: columns\n",
        "::: {.column width=\"33%\"}\n",
        "Adelie\n",
        "\n",
        "![](images/clipboard-1367554877.png)\n",
        ":::\n",
        "\n",
        "::: {.column width=\"33%\"}\n",
        "Gentoo\n",
        "\n",
        "![](images/clipboard-3518959291.png)\n",
        ":::\n",
        "\n",
        "::: {.column width=\"33%\"}\n",
        "Chinstrap\n",
        "\n",
        "![](images/clipboard-2663292782.png)\n",
        ":::\n",
        "::::::\n",
        ":::::::\n",
        "\n",
        "## Determining the number of clusters\n",
        "\n",
        "</br>\n",
        "\n",
        "A simple way to determine the number of clusters is recording the quality of clustering for different numbers of clusters.\n",
        "\n",
        "In **sklearn**, we can record the [***inertia***]{style=\"color:#8B004F;\"} of a partition into clusters. Technically, the inertia is the sum of squared distances of observations to their closest cluster center.\n",
        "\n",
        "The lower the intertia the better because this means that all observations are close to their cluster centers *overall*.\n",
        "\n",
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        "To record the intertias for different numbers of clusters, we use the code below.\n"
      ],
      "id": "c856e3bd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: false\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: false \n",
        "\n",
        "inertias = []\n",
        "\n",
        "for i in range(1,11):\n",
        "    kmeans = KMeans(n_clusters=i)\n",
        "    kmeans.fit(Xs_penguins)\n",
        "    inertias.append(kmeans.inertia_)"
      ],
      "id": "fc4ae1a8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "Next, we plot the intertias and look for the *elbow* in the plot.\n",
        "\n",
        "The *elbow* represents a number of clusters for which there is no significant improvement in the quality of the clustering.\n",
        "\n",
        "In this case, the number of clusters recommended by this *elbow* method is 3.\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "e38a4cc0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true \n",
        "\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.plot(range(1,11), inertias, marker='o')\n",
        "plt.title('Elbow method')\n",
        "plt.xlabel('Number of clusters')\n",
        "plt.ylabel('Inertia')\n",
        "plt.show()"
      ],
      "id": "25d9684a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## Comments\n",
        "\n",
        "-   Selecting the number of clusters *K* is more of an art than a science. You'd better get *K* right, or you'll be detecting patterns where none really exist.\n",
        "\n",
        "-   We need to standardize all predictors.\n",
        "\n",
        "-   The performance of *K*-means clustering is affected by the presence of outliers.\n",
        "\n",
        "-   The algorithm's solution is sensitive to the starting point. Because of this, it is typically run multiple times, and the best clustering among all runs is reported.\n",
        "\n",
        "# Hierarchical Clustering\n",
        "\n",
        "## Hierarchical clustering\n",
        "\n",
        "</br>\n",
        "\n",
        "::::::: center\n",
        ":::::: columns\n",
        ":::: {.column width=\"50%\"}\n",
        "::: {style=\"font-size: 90%;\"}\n",
        "-   Start with each observation standing alone in its own group.\n",
        "\n",
        "-   Then, gradually merge the groups that are close together.\n",
        "\n",
        "-   Continue this process until all the observations are in one large group.\n",
        "\n",
        "-   Finally, step back and see which grouping works best.\n",
        ":::\n",
        "::::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        "</br>\n",
        "\n",
        "![](images/clipboard-2325345248.png)\n",
        ":::\n",
        "::::::\n",
        ":::::::\n",
        "\n",
        "## Essential elements\n",
        "\n",
        "</br>\n",
        "\n",
        "::: incremental\n",
        "1.  Distance between two observations.\n",
        "\n",
        "    -   We use Euclidean distance.\n",
        "\n",
        "    -   We must standardize the predictors!\n",
        "\n",
        "2.  Distance between [**two groups**]{style=\"color:darkgreen;\"}.\n",
        ":::\n",
        "\n",
        "## Distance between two groups\n",
        "\n",
        "</br></br>\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"60%\"}\n",
        "The distance between two groups of observations is called [***linkage***]{style=\"color:pink;\"}.\n",
        "\n",
        "There are several types of linking. The most commonly used are:\n",
        "\n",
        "-   Complete linkage\n",
        "-   Average linkage\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}\n",
        "![](images/vinculacion.png)\n",
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## Complete linkage\n",
        "\n",
        "The distance between groups is measured using the largest distance between observations.\n",
        "\n",
        "![](images/completa.png){fig-align=\"center\"}\n",
        "\n",
        "## Average linkage\n",
        "\n",
        "The distance between groups is the average of all the distances between observations.\n",
        "\n",
        "![](images/promedio.png){fig-align=\"center\"}\n",
        "\n",
        "## Hierarchical clustering algorithm\n",
        "\n",
        "</br></br>\n",
        "\n",
        "The steps of the algorithm are as follows:\n",
        "\n",
        "::: incremental\n",
        "1.  Assign each observation to a cluster.\n",
        "2.  Measure the linkage between all clusters.\n",
        "3.  Merge the two most similar clusters.\n",
        "4.  Then, merge the next two most similar clusters.\n",
        "5.  Continue until all clusters have been merged.\n",
        ":::\n",
        "\n",
        "## Example 2\n",
        "\n",
        "</br></br>\n",
        "\n",
        "Let's consider a dataset called \"Cereals.xlsx.\" The data includes nutritional information for 77 cereals, among other data.\n"
      ],
      "id": "04a1b205"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "cereal_data = pd.read_excel(\"cereals.xlsx\")"
      ],
      "id": "3c3fe763",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "Here, we will restrict to 7 numeric predictors.\n"
      ],
      "id": "b8d6d209"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "X_cereal = cereal_data.filter(['calories', 'protein', 'fat', 'sodium', 'fiber',\n",
        "                              'carbo', 'sugars', 'potass', 'vitamins'])\n",
        "X_cereal.head()"
      ],
      "id": "8e4b79fd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Do not forget to standardize\n",
        "\n",
        "</br></br></br>\n",
        "\n",
        "Since the hierarchical clustering algorithm also works with distances, we must standardize the predictors to have an accurate analysis.\n"
      ],
      "id": "b636d916"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "scaler = StandardScaler()\n",
        "Xs_cereal = scaler.fit_transform(X_cereal)"
      ],
      "id": "0eef45a5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        "Unfortunately, the `Agglomerative()` function in **sklearn** is not as user friendly compared to other available functions in Python. In particular, the **scipy** library has a function called `linkage()` for hierarchical clustering that works as follows.\n"
      ],
      "id": "e09a5a5c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "\n",
        "Clust_Cereal = linkage(Xs_cereal, method = 'complete')"
      ],
      "id": "6a5cef89",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The argument `method` sets the type of linkage to be used.\n",
        "\n",
        "## Results: Dendrogram\n",
        "\n",
        "</br>\n",
        "\n",
        "::::::: center\n",
        ":::::: columns\n",
        ":::: {.column width=\"40%\"}\n",
        "::: {style=\"font-size: 80%;\"}\n",
        "-   A dendrogram is a tree diagram that summarizes and visualizes the clustering process.\n",
        "-   Observations are on the horizontal axis and at the bottom of the diagram.\n",
        "-   The vertical axis shows the distance between groups.\n",
        "-   It is read from top to bottom.\n",
        ":::\n",
        "::::\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "![](images/clipboard-2041051251.png)\n",
        ":::\n",
        "::::::\n",
        ":::::::\n",
        "\n",
        "## What to do with a dendrogram?\n",
        "\n",
        "</br>\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"40%\"}\n",
        "We draw a horizontal line at a specific height to define the groups.\n",
        "\n",
        "This line defines three groups.\n",
        ":::\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "![](images/dendrograma1.png)\n",
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"40%\"}\n",
        "This line defines 5 groups.\n",
        ":::\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "![](images/dendrograma2.png)\n",
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## Dendrogram in Python\n",
        "\n",
        "To produce a nice dendrogram in Python, we use the function `dendrogram` from **scipy**.\n"
      ],
      "id": "656ee4cf"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| output: true\n",
        "#| echo: true\n",
        "#| fig-align: center\n",
        "#| code-fold: true\n",
        "\n",
        "plt.figure(figsize=(8, 4))\n",
        "dendrogram(Clust_Cereal, color_threshold=None)\n",
        "plt.title('Hierarchical Clustering Dendrogram (Complete Linkage)')\n",
        "plt.xlabel('Sample Index')\n",
        "plt.ylabel('Distance')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "b652efbc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Comments\n",
        "\n",
        "</br>\n",
        "\n",
        "-   Remember to standardize the predictors!\n",
        "\n",
        "-   It's not easy to choose the correct number of clusters using the dendrogram.\n",
        "\n",
        "-   The results depend on the linkage measure used.\n",
        "\n",
        "    -   Complete linkage results in narrower clusters.\n",
        "    -   Average linkage strikes a balance between narrow and thinner clusters.\n",
        "\n",
        "-   Hierarchical clustering is useful for detecting outliers.\n",
        "\n",
        "## \n",
        "\n",
        "</br></br></br>\n",
        "\n",
        "> *With these methods, there is no single correct answer; any solution that exposes some interesting aspect of the data should be considered.*\n",
        "\n",
        "James et al. (2017)\n",
        "\n",
        "# [Return to main page](https://alanrvazquez.github.io/TEC-IN2004B/)"
      ],
      "id": "f405dad7"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}