{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Autocorrelation Models\"\n",
        "subtitle: \"IN2004B: Generation of Value with Data Analytics\"\n",
        "author: \n",
        "  - name: Alan R. Vazquez\n",
        "    affiliations:\n",
        "      - name: Department of Industrial Engineering\n",
        "format: \n",
        "  revealjs:\n",
        "    chalkboard: false\n",
        "    multiplex: false\n",
        "    footer: \"Tecnologico de Monterrey\"\n",
        "    logo: IN2004B_logo.png\n",
        "    css: style.css\n",
        "    slide-number: True\n",
        "    html-math-method: mathjax\n",
        "editor: visual\n",
        "jupyter: python3\n",
        "---\n",
        "\n",
        "\n",
        "## Agenda\n",
        "\n",
        "</br>\n",
        "\n",
        "1.  Autocorrelation\n",
        "2.  The ARIMA model\n",
        "3.  The SARIMA model\n",
        "\n",
        "## Load the libraries\n",
        "\n",
        "Before we start, let's import the data science libraries into Python.\n"
      ],
      "id": "ba9f79c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "\n",
        "# Importing necessary libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, r2_score\n",
        "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from statsmodels.tsa.statespace.tools import diff\n",
        "from sklearn.metrics import mean_squared_error, r2_score"
      ],
      "id": "66cb3337",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Here, we use specific functions from the **pandas**, **matplotlib**, **seaborn**,  **sklearn** and **statsmodels** libraries in Python.\n",
        "\n",
        "# Autocorrelation\n",
        "\n",
        "## Problem with linear regression models\n",
        "\n",
        "</br>\n",
        "\n",
        "Linear regression models do not incorporate the [dependence]{style=\"color:purple;\"} between consecutive values in a time series.\n",
        "\n",
        "This is unfortunate because responses recorded over close time periods tend to be correlated. This correlation is called the [**autocorrelation**]{style=\"color:purple;\"} of the time series.\n",
        "\n",
        "Autocorrelation helps us develop a model that can make better predictions of future responses.\n",
        "\n",
        "## What is correlation?\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"60%\"}\n",
        "</br>\n",
        "\n",
        "-   It is a measure of the strength and direction of the *linear* relationship between two numerical variables.\n",
        "\n",
        "-   Specifically, it is used to assess the relationship between two sets of observations.\n",
        "\n",
        "-   Correlation is between $-1$ and 1.\n",
        ":::\n",
        "\n",
        "::: {.column width=\"40%\"}\n",
        "</br>\n"
      ],
      "id": "eb0f7c50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "# Load the data into Python\n",
        "Ads_data = pd.read_excel('Advertising.xlsx')\n",
        "\n",
        "# Calculate correlation\n",
        "correlation = Ads_data['TV'].corr(Ads_data['Sales'])\n",
        "\n",
        "# Create scatter plot\n",
        "plt.figure(figsize=(5, 5))\n",
        "sns.scatterplot(data=Ads_data, x='TV', y='Sales')\n",
        "plt.xlabel('TV Advertising Budget')\n",
        "plt.ylabel('Sales')\n",
        "# Optionally, also add as text on the plot\n",
        "plt.text(0.05, 0.95, f'Correlation = {correlation:.2f}', transform=plt.gca().transAxes,\n",
        "         fontsize=12, color='blue', ha='left', va='top')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "id": "842416c5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## How do we measure autocorrelation?\n",
        "\n",
        "</br></br></br>\n",
        "\n",
        "There are two formal tools for measuring the correlation between observations in a time series:\n",
        "\n",
        "::: incremental\n",
        "-   The [***autocorrelation***]{style=\"color:green;\"} function.\n",
        "\n",
        "-   The [***partial autocorrelation***]{style=\"color:purple;\"} function.\n",
        ":::\n",
        "\n",
        "## The autocorrelation function\n",
        "\n",
        "> Measures the correlation between responses separated by $j$ periods.\n",
        "\n",
        "For example, consider the autocorrelation between the current temperature and the temperature recorded the day before.\n",
        "\n",
        ". . .\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/correlation_1.png){fig-align=\"center\" width=\"465\" height=\"288\"}\n",
        ":::\n",
        "\n",
        "::: {.column width=\"50%\"}\n",
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## The autocorrelation function\n",
        "\n",
        "> Measures the correlation between responses separated by $j$ periods.\n",
        "\n",
        "For example, consider the autocorrelation between the current temperature and the temperature recorded the day before.\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/correlation_1.png){fig-align=\"center\" width=\"465\" height=\"288\"}\n",
        ":::\n",
        "::: {.column width=\"50%\"}\n",
        "![](images/correlation_2.png){fig-align=\"center\" width=\"465\" height=\"288\"}\n",
        ":::\n",
        ":::::\n",
        "::::::\n",
        "\n",
        "## The autocorrelation function\n",
        "\n",
        "> Measures the correlation between responses separated by $j$ periods.\n",
        "\n",
        "For example, consider the autocorrelation between the current temperature and the temperature recorded the day before. This would be the correlation between these two columns\n",
        "\n",
        "![](images/correlation_combined.png){fig-align=\"center\"}\n",
        "\n",
        "\n",
        "## Example 1\n",
        "\n",
        "Let's consider again the dataset in the file \"Amtrak.xlsx.\" The file contains records of Amtrak passenger numbers from January 1991 to March 2004.\n"
      ],
      "id": "235ac069"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "Amtrak_data = pd.read_excel('Amtrak.xlsx')\n",
        "Amtrak_data.head()"
      ],
      "id": "d4de7322",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##\n",
        "\n",
        "</br>\n"
      ],
      "id": "6b73ffae"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.lineplot(x='Month', y='Ridership (in 000s)', data = Amtrak_data)\n",
        "plt.xlabel('Month')\n",
        "plt.ylabel('Ridership')\n",
        "plt.title('Amtrak Ridership Over Time')\n",
        "plt.show()"
      ],
      "id": "ba126c8b",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Autocorrelation function\n",
        "\n",
        "</br>\n",
        "\n",
        "- The autocorrelation function measures the correlation between responses that are separated by a specific number of periods.\n",
        "\n",
        "- The autocorrelation function is commonly visualized using a bar chart. \n",
        "\n",
        "- The vertical axis shows the differences (or [*lags*]{style=\"color:brown;\"}) between the periods considered, and the horizontal axis shows the correlations between observations at different lags.\n",
        "\n",
        "## Autocorrelation plot\n",
        "\n",
        "</br>\n",
        "\n",
        "In Python, we use the `plot_acf` function from the **statsmodels** library.\n"
      ],
      "id": "cb4eb874"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "#| fig-align: center\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plot_acf(Amtrak_data['Ridership (in 000s)'], lags = 25)\n",
        "plt.xlabel(\"Lag\")\n",
        "plt.ylabel(\"Correlation\")\n",
        "plt.show()"
      ],
      "id": "8ffa118a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The `lags` parameter controls the number of periods for which to compute the autocorrelation function.\n",
        "\n",
        "## The resulting plot\n",
        "\n",
        "</br>\n"
      ],
      "id": "b9553eb6"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plot_acf(Amtrak_data['Ridership (in 000s)'], lags = 25)\n",
        "plt.xlabel(\"Lag\")\n",
        "plt.ylabel(\"Correlation\")\n",
        "plt.show()"
      ],
      "id": "4e23b97c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "##\n",
        "\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {style=\"font-size: 80%;\"}\n",
        "\n",
        "</br>\n",
        "\n",
        "- The autocorrelation plot shows that the responses and those from zero periods ago have a correlation of 1.\n",
        "\n",
        "- The autocorrelation plot shows that the responses and those from one period ago have a correlation of around 0.45.\n",
        "\n",
        "- The autocorrelation plot shows that the responses and those from 24 periods ago have a correlation of around 0.5.\n",
        ":::\n",
        "\n",
        ":::\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "</br>"
      ],
      "id": "6bced72c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "plt.figure(figsize=(4, 4))\n",
        "plot_acf(Amtrak_data['Ridership (in 000s)'], lags = 25)\n",
        "plt.xlabel(\"Lag\")\n",
        "plt.ylabel(\"Correlation\")\n",
        "plt.show()"
      ],
      "id": "16fa66cd",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "## Autocorrelation patterns\n",
        "\n",
        "</br>\n",
        "\n",
        "- **A strong autocorrelation (positive or negative) with a lag** $j$ **greater than 1 and its multiples** ($2k, 3k, \\ldots$) typically reflects a cyclical pattern or seasonality.\n",
        "\n",
        "- **Positive lag-1 autocorrelation** describes a series in which consecutive values *generally* move in the same direction.\n",
        "\n",
        "- **Negative lag-1 autocorrelation** reflects oscillations in the series, where high values (*generally*) are immediately followed by low values and vice versa.\n",
        "\n",
        "## More about the autocorrelation function\n",
        "\n",
        "Consider the problem of predicting the average price of a kilo of avocado this month.\n",
        "\n",
        "For this, we have the average price from last month and the month before that.\n",
        "\n",
        "![](images/Avocado1.png){fig-align=\"center\"}\n",
        "\n",
        "## \n",
        "\n",
        "</br></br>\n",
        "\n",
        "The autocorrelation function for $Y_t$ and $Y_{t-2}$ includes the direct and indirect effect of $Y_{t-2}$ on $Y_t$.\n",
        "\n",
        "![](images/Avocado3.png){fig-align=\"center\"}\n",
        "\n",
        "## Partial autocorrelation function\n",
        "\n",
        "> Measures the correlation between responses that are separated by $j$ periods, **excluding correlation** due to responses separated by intervening periods.\n",
        "\n",
        "![](images/Avocado4.png){fig-align=\"center\"}\n",
        "\n",
        "## \n",
        "\n",
        "In technical terms, the partial autocorrelation function fits the following linear regression model\n",
        "\n",
        "$$\\hat{Y}_t = \\hat{\\beta}_1 Y_{t-1} + \\hat{\\beta}_2 Y_{t-2}$$\n",
        "Where:\n",
        "\n",
        "- $\\hat{Y}_{t}$ is the predicted response at the current time ($t$).\n",
        "- $\\hat{\\beta}_1$ is the *direct effect* of $Y_{t-1}$ on predicting $Y_{t}$.\n",
        "- $\\hat{\\beta}_2$ is the *direct effect* of $Y_{t-2}$ on predicting $Y_{t}$.\n",
        "\n",
        "The partial autocorrelation between $Y_t$ and $Y_{t-2}$ is equal to $\\hat{\\beta}_2$. \n",
        "\n",
        "##\n",
        "\n",
        "- The partial autocorrelation function is visualized using a graph similar to that for autocorrelation.\n",
        "\n",
        "- The vertical axis shows the differences (or *lags*) between the periods considered, and the horizontal axis shows the partial correlations between observations at different lags.\n",
        "\n",
        "In Python, we use the `plot_pacf` function from **statsmodels**.\n"
      ],
      "id": "ef11925f"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: true\n",
        "#| output: false\n",
        "#| fig-align: center\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plot_pacf(Amtrak_data['Ridership (in 000s)'], lags = 25)\n",
        "plt.xlabel(\"Lag\")\n",
        "plt.ylabel(\"Correlation\")\n",
        "plt.show()"
      ],
      "id": "5bae450c",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## \n",
        "\n",
        "</br>\n",
        "\n",
        ":::::: center\n",
        "::::: columns\n",
        "::: {.column width=\"50%\"}\n",
        "\n",
        "::: {style=\"font-size: 80%;\"}\n",
        "\n",
        "</br>\n",
        "\n",
        "- The partial autocorrelation plot shows that the responses and those from one period ago have a correlation of around 0.45. *This is the same for the autocorrelation plot.*\n",
        "\n",
        "- The partial autocorrelation plot shows that the responses and those from two periods ago have a correlation near 0.\n",
        ":::\n",
        ":::\n",
        "::: {.column width=\"50%\"}"
      ],
      "id": "eb5cbed2"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| echo: false\n",
        "#| output: true\n",
        "#| fig-align: center\n",
        "\n",
        "plt.figure(figsize=(10, 6))\n",
        "plot_pacf(Amtrak_data['Ridership (in 000s)'], lags = 25)\n",
        "plt.xlabel(\"Lag\")\n",
        "plt.ylabel(\"Correlation\")\n",
        "plt.show()"
      ],
      "id": "94a7a5fc",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        ":::\n",
        ":::\n",
        ":::\n",
        "\n",
        "# The ARIMA Model\n",
        "\n",
        "## Autoregressive models\n",
        "\n",
        "*Autoregressive models* are a type of linear regression model that directly incorporate the autocorrelation of the time series to predict the current response.\n",
        "\n",
        "Their main characteristic is that the predictors of the current value of the series are its past values.\n",
        "\n",
        "- An autoregressive model of order 2 has the mathematical form: $\\hat{Y}_t = \\hat{\\beta}_0 + \\hat{\\beta}_1 Y_{t-1} + \\hat{\\beta}_2 Y_{t-2}.$\n",
        "\n",
        "- An order 3 model looks like this: $\\hat{Y}_t = \\hat{\\beta}_0 + \\hat{\\beta}_1 Y_{t-1} + \\hat{\\beta}_2 Y_{t-2} + \\hat{\\beta}_3 Y_{t-3}.$\n",
        "\n",
        "## ARIMA models\n",
        "\n",
        "</br>\n",
        "\n",
        "A special class of autoregressive models are [***ARIMA***]{style=\"color:purple;\"} ([*Autoregressive Integrated Moving Average*]{style=\"color:purple;\"}).\n",
        "\n",
        "An ARIMA model is composed of three elements:\n",
        "\n",
        "::: incremental\n",
        "1. Differenced or integrated operators (*integrated*).\n",
        "2. Autoregressive terms (*autoregressive*).\n",
        "3. Stochastic terms (*moving average*).\n",
        ":::\n",
        "\n",
        "# El modelo SARIMA\n",
        "\n",
        "## Estacionalidad\n",
        "\n",
        "La **estacionalidad** consiste en un comportamiento repetitivo o cíclico que ocurre con una frecuencia constante.\n",
        "\n",
        "Se puede identificar de la gráfica de la serie o usando las ACF and PACF.\n",
        "\n",
        "Para esto, debemos haber removido la tendencia.\n",
        "\n",
        "## En Python\n",
        "\n",
        "## Modelo SARIMA\n",
        "\n",
        "El modelo [S]{style=\"color:orange;\"}ARIMA ([*Seasonal*]{style=\"color:orange;\"} Autoregressive Integrated Moving Average) es una extensión del modelo ARIMA para modelar los patrones de estacionalidad.\n",
        "\n",
        "El modelo SARIMA tiene tres elementos adicionales para modelar la estacionalidad en la serie de tiempo.\n",
        "\n",
        "1.  Operadores diferenciados o integrados (*integrated*) para la estacionalidad.\n",
        "2.  Términos autoregresivos (*autoregressive*) para la estacionalidad.\n",
        "3.  Términos estocásticos o promedios móviles (*moving average*) para la estacionalidad.\n",
        "\n",
        "## Notación\n",
        "\n",
        "La estacionalidad en una serie de tiempo es un patrón regular de cambios que se repite durante [$S$ períodos de tiempo]{style=\"color:orange;\"}, donde $S$ define el número de períodos de tiempo hasta que el patrón se repite nuevamente.\n",
        "\n",
        "Por ejemplo, hay estacionalidad en los datos mensuales para los cuales los valores altos siempre tienden a ocurrir en algunos meses en particular y los valores bajos siempre tienden a ocurrir en otros meses en particular.\n",
        "\n",
        "En este caso, $S=12$ (meses por año) es el lapso del comportamiento estacional periódico. Para datos trimestrales, $S=4$ períodos de tiempo por año.\n",
        "\n",
        "## Diferenciación estacional\n",
        "\n",
        "Es la diferencia entre una respuesta y una respuesta con un rezago que es múltiplo de $S$.\n",
        "\n",
        "Por ejemplo, con datos mensuales $S=12$,\n",
        "\n",
        "-   Una diferencia estacional de nivel 1 es $Y_{t} - Y_{t-12}$.\n",
        "-   Una diferencia estacional de nivel 2 es $(Y_t - Y_{t-12}) - (Y_{t-12} - Y_{t-24})$.\n",
        "\n",
        "La diferenciación estacional elimina la tendencia estacional y también puede eliminar un tipo de no estacionariedad de paseo aleatorio estacional.\n",
        "\n",
        "## Términos de los modelos AR y MA para estacionalidad\n",
        "\n",
        "En el SARIMA, los términos de los componentes AR y MA estacionales predicen la respuesta actual ($Y_t$) usando respuestas y errores en momentos con rezagos que son múltiplos de $S$.\n",
        "\n",
        "Por ejemplo, con datos mensuales $S = 12$,\n",
        "\n",
        "-   El modelo AR estacional de orden 1 usaría $Y_{t-12}$ para predecir $Y_{t}$.\n",
        "-   El modelo AR estacional de orden 2 usaría $Y_{t-12}$ y $Y_{t-24}$ para predecir $Y_{t}$.\n",
        "-   El modelo MA estacional de orden 1 usaría el término estocástico $a_{t-12}$ como un predictor.\n",
        "-   El modelo MA estacional de orden 2 usaría los términos estocásticos $a_{t-12}$ y $a_{t-24}$ como predictores.\n",
        "\n",
        "# En Python\n",
        "\n",
        "# [Return to main page](https://alanrvazquez.github.io/TEC-IN1002B-Website/)"
      ],
      "id": "764fe7a4"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}